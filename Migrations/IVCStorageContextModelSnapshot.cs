// <auto-generated />
using System;
using GVCServer.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GVCServer.Migrations
{
    [DbContext(typeof(IVCStorageContext))]
    partial class IVCStorageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GVCServer.Data.Entities.Direction", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Direction");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.OpTrain", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("Datop")
                        .HasColumnName("DATOP")
                        .HasColumnType("datetime");

                    b.Property<string>("Kop")
                        .IsRequired()
                        .HasColumnName("KOP")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<bool?>("LastOper")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("Msgid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MSGID")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SourceStation")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<Guid>("TrainId")
                        .HasColumnName("TrainID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Uid");

                    b.HasIndex("Kop");

                    b.HasIndex("SourceStation");

                    b.HasIndex("TrainId");

                    b.ToTable("OP_TRAIN");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.OpVag", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CodeOper")
                        .IsRequired()
                        .HasColumnType("char(5)")
                        .HasDefaultValueSql("('Код операции')")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOper")
                        .HasColumnType("datetime")
                        .HasComment("Дата и время операции");

                    b.Property<string>("Destination")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<bool?>("LastOper")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Msgid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MSGID")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Дата и время сообщения");

                    b.Property<string>("Num")
                        .IsRequired()
                        .HasColumnType("char(8)")
                        .IsFixedLength(true)
                        .HasComment("Номер вагона")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("PlanForm")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasComment("Станция элементарного назначения ПЛФ")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<byte?>("SequenceNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasComment("Код станции совершения операции")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<Guid?>("TrainId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Поезд");

                    b.Property<short?>("WeightNetto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Uid");

                    b.HasIndex("CodeOper");

                    b.HasIndex("Num");

                    b.HasIndex("Source");

                    b.HasIndex("TrainId");

                    b.ToTable("OP_VAG");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Mnemonic")
                        .HasColumnType("nchar(7)")
                        .IsFixedLength(true)
                        .HasMaxLength(7);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("Parameter")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("UK_Operations");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.Pfclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("MaxLength")
                        .HasColumnType("tinyint");

                    b.Property<short>("MaxWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("ReqLength")
                        .HasColumnType("tinyint");

                    b.Property<short>("ReqWeight")
                        .HasColumnType("smallint");

                    b.Property<string>("StaDestination")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("StaForm")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("StaForm");

                    b.ToTable("PFclaim");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.PlanForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormStation")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int>("HighRange")
                        .HasColumnType("int");

                    b.Property<int>("LowRange")
                        .HasColumnType("int");

                    b.Property<string>("TargetStation")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<byte>("TrainKind")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("FormStation");

                    b.HasIndex("TrainKind");

                    b.ToTable("PlanForm");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("ArrivalTime")
                        .HasColumnType("time(0)");

                    b.Property<TimeSpan?>("DepartureTime")
                        .HasColumnType("time(0)");

                    b.Property<short>("DirectionId")
                        .HasColumnType("smallint");

                    b.Property<string>("Station")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<short>("TrainNum")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.Station", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<bool?>("Department")
                        .HasColumnType("bit");

                    b.Property<string>("Mnemonic")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Code")
                        .HasName("PK_Stations");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("UK_Stations");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.Train", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DestinationStation")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasComment("КОД СТАНЦИИ НАЗНАЧЕНИЯ ПОЕЗДА")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("Dislocation")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("FormStation")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasComment("КОД СТАНЦИИ ФОРМИРОВАНИЯ ПОЕЗДА")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FormTime")
                        .HasColumnType("datetime")
                        .HasComment("ВРЕМЯ ОКОНЧАНИЯ ФОРМИРОВАНИЯ СОСТАВА");

                    b.Property<short>("Length")
                        .HasColumnType("smallint")
                        .HasComment("УСЛОВНАЯ ДЛИНА ПОЕЗДА");

                    b.Property<short>("Ordinal")
                        .HasColumnType("smallint")
                        .HasComment("ПОРЯДКОВЫЙ НОМЕР СОСТАВА");

                    b.Property<string>("Oversize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(4)")
                        .HasDefaultValueSql("((0))")
                        .IsFixedLength(true)
                        .HasComment("ИНДЕКС НЕГАБАРИТНОСТИ")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<byte?>("TrainKindId")
                        .HasColumnType("tinyint");

                    b.Property<string>("TrainNum")
                        .HasColumnType("char(4)")
                        .IsFixedLength(true)
                        .HasComment("НОМЕР ПОЕЗДА")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<int>("WeightBrutto")
                        .HasColumnType("int")
                        .HasComment("ВЕС БРУТТО ПОЕЗДА");

                    b.HasKey("Uid");

                    b.HasIndex("TrainKindId");

                    b.ToTable("Train");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.TrainKind", b =>
                {
                    b.Property<byte>("Code")
                        .HasColumnType("tinyint");

                    b.Property<string>("Mnemocode")
                        .IsRequired()
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<short?>("TrainNumHigh")
                        .HasColumnType("smallint");

                    b.Property<short?>("TrainNumLow")
                        .HasColumnType("smallint");

                    b.HasKey("Code");

                    b.ToTable("TrainKind");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.Vagon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(8)")
                        .IsFixedLength(true)
                        .HasComment("ИНВЕНТАРНЫЙ НОМЕР ВАГОНА")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<byte>("Kind")
                        .HasColumnType("tinyint");

                    b.Property<string>("Ksob")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KSOB")
                        .HasColumnType("nvarchar(8)")
                        .HasDefaultValueSql("((99))")
                        .HasComment("КОД СОБСТВЕННИКА")
                        .HasMaxLength(8);

                    b.Property<short>("Tvag")
                        .HasColumnName("TVAG")
                        .HasColumnType("smallint")
                        .HasComment("ТАРА ВАГОНА");

                    b.HasKey("Id");

                    b.HasIndex("Kind");

                    b.ToTable("Vagon");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.VagonKind", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Mnemocode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(90)")
                        .HasMaxLength(90);

                    b.HasKey("Id");

                    b.ToTable("VagonKind");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.OpTrain", b =>
                {
                    b.HasOne("GVCServer.Data.Entities.Operation", "KopNavigation")
                        .WithMany("OpTrain")
                        .HasForeignKey("Kop")
                        .HasConstraintName("FK_OP_TRAIN_Operation")
                        .HasPrincipalKey("Code")
                        .IsRequired();

                    b.HasOne("GVCServer.Data.Entities.Station", "SourceStationNavigation")
                        .WithMany("OpTrain")
                        .HasForeignKey("SourceStation")
                        .HasConstraintName("FK_OP_TRAIN_Station");

                    b.HasOne("GVCServer.Data.Entities.Train", "Train")
                        .WithMany("OpTrain")
                        .HasForeignKey("TrainId")
                        .HasConstraintName("FK_OP_TRAIN_Train")
                        .IsRequired();
                });

            modelBuilder.Entity("GVCServer.Data.Entities.OpVag", b =>
                {
                    b.HasOne("GVCServer.Data.Entities.Operation", "CodeOperNavigation")
                        .WithMany("OpVag")
                        .HasForeignKey("CodeOper")
                        .HasConstraintName("FK_OP_VAG_Oper")
                        .HasPrincipalKey("Code")
                        .IsRequired();

                    b.HasOne("GVCServer.Data.Entities.Vagon", "NumNavigation")
                        .WithMany("OpVag")
                        .HasForeignKey("Num")
                        .HasConstraintName("FK_OP_VAG_ToCars")
                        .IsRequired();

                    b.HasOne("GVCServer.Data.Entities.Station", "SourceNavigation")
                        .WithMany("OpVag")
                        .HasForeignKey("Source")
                        .HasConstraintName("FK_OP_VAG_STA")
                        .IsRequired();

                    b.HasOne("GVCServer.Data.Entities.Train", "Train")
                        .WithMany("OpVag")
                        .HasForeignKey("TrainId")
                        .HasConstraintName("FK_OP_VAG_ToTrain");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.Pfclaim", b =>
                {
                    b.HasOne("GVCServer.Data.Entities.Station", "StaFormNavigation")
                        .WithMany("Pfclaim")
                        .HasForeignKey("StaForm")
                        .HasConstraintName("FK_PFclaim_Station")
                        .IsRequired();
                });

            modelBuilder.Entity("GVCServer.Data.Entities.PlanForm", b =>
                {
                    b.HasOne("GVCServer.Data.Entities.Station", "FormStationNavigation")
                        .WithMany("PlanForm")
                        .HasForeignKey("FormStation")
                        .HasConstraintName("FK_PlanForm_Sta")
                        .IsRequired();

                    b.HasOne("GVCServer.Data.Entities.TrainKind", "TrainKindNavigation")
                        .WithMany("PlanForm")
                        .HasForeignKey("TrainKind")
                        .HasConstraintName("FK_PlanForm_TrainKind")
                        .IsRequired();
                });

            modelBuilder.Entity("GVCServer.Data.Entities.Schedule", b =>
                {
                    b.HasOne("GVCServer.Data.Entities.Direction", "Direction")
                        .WithMany("Schedule")
                        .HasForeignKey("DirectionId")
                        .HasConstraintName("FK_Schedule_Direction")
                        .IsRequired();
                });

            modelBuilder.Entity("GVCServer.Data.Entities.Train", b =>
                {
                    b.HasOne("GVCServer.Data.Entities.TrainKind", "TrainKind")
                        .WithMany("Train")
                        .HasForeignKey("TrainKindId")
                        .HasConstraintName("FK_Train_TrainKind");
                });

            modelBuilder.Entity("GVCServer.Data.Entities.Vagon", b =>
                {
                    b.HasOne("GVCServer.Data.Entities.VagonKind", "KindNavigation")
                        .WithMany("Vagon")
                        .HasForeignKey("Kind")
                        .HasConstraintName("FK_Vagon_VagonKind")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
