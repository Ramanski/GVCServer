@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Spinner

@{
    var Tools = new List<string>() { "Update", "Cancel" };
}
<div id="sfGrid">
    <SfGrid DataSource="@trainList" @ref="Grid" EnableVirtualization="false" AllowSelection="true" AllowSorting="true" Height="@Height" Toolbar="@(ShowToolbar?Tools:null)">
        <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="AllowEditing"></GridEditSettings>
        <GridEvents OnLoad="DataBoundHandler" OnDataBound="OnDataBoundHandler" DataBound="DataBoundHandler" OnBeginEdit="()=> { ShowToolbar = true; }" OnActionComplete="ActionCompleted" RowSelected="RecordSelected" RowDeselected="DeselectRow" TValue="TrainModel"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(TrainModel.Num) HeaderText="Номер" TextAlign="TextAlign.Left" Width="10%" AllowEditing="true" ValidationRules="@(new ValidationRules { Number = true, Range = new double[] { 1, 9999 } })"></GridColumn>
            <GridColumn Field=@nameof(TrainModel.Index) IsPrimaryKey="true" HeaderText="Индекс" Width="14%" AllowEditing="false"></GridColumn>
            <GridColumn Field=@nameof(TrainModel.Length) HeaderText="Длина" Width="10%" AllowEditing="false"></GridColumn>
            <GridColumn Field=@nameof(TrainModel.WeightBrutto) HeaderText="Вес" Width="9%" AllowEditing="false"></GridColumn>
            @if (IsOnStation)
            {
                <GridColumn Field="Path.Area" HeaderText="Парк" Width="15%" AllowEditing="false"></GridColumn>
                <GridColumn Field="Path.PathNum" HeaderText="Путь" Width="9%" AllowEditing="false"></GridColumn>
            }
            else
            {
                <GridColumn Field=@nameof(TrainModel.Dislocation) HeaderText="Станция" Width="12%" AllowEditing="false"></GridColumn>
                <GridColumn Field=@nameof(TrainModel.CodeOper) HeaderText="Операция" Width="12%" AllowEditing="false"></GridColumn>
            }
            <GridColumn Field=@nameof(TrainModel.DateOper) Format="HH:mm" HeaderText="Время" Width="9%" AllowEditing="true" EditType="EditType.DateTimePickerEdit"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
<SfSpinner @ref="SpinnerObj" Target="#sfGrid"></SfSpinner>

@code {
    SfSpinner SpinnerObj;
    [Parameter] public List<TrainModel> trainList { get; set; }
    [Parameter] public bool IsOnStation { get; set; } = false;
    [Parameter] public bool AllowEditing { get; set; } = false;
    [Parameter] public EventCallback<TrainModel> TrainParamsUpdated { get; set; }
    [Parameter] public EventCallback IsTrainSelected { get; set; }
    [Parameter] public EventCallback IsTrainDeselected { get; set; }
    [Parameter] public string Height { get; set; } = "95%";
    public TrainModel selectedTrain { get; set; }
    private bool ShowToolbar = false;
    private int selectedRow;
    SfGrid<TrainModel> Grid;

    public async Task RecordSelected(RowSelectEventArgs<TrainModel> args)
    {
        selectedRow = (int)args.RowIndex;
        selectedTrain = trainList[selectedRow];
        await IsTrainSelected.InvokeAsync(args);
    }

    public void UpdateSelectedRow(TrainModel trainModel)
    {
        Grid.UpdateRow(selectedRow, trainModel);
    }

    public async Task DeselectRow()
    {
        selectedTrain = null;
        await IsTrainDeselected.InvokeAsync(null);
    }

    public void OnDataBoundHandler(BeforeDataBoundArgs<TrainModel> args)
    {
        SpinnerObj.Show();
    }

    public void DataBoundHandler(object args)
    {
        SpinnerObj.Hide();
    }

    public void ActionCompleted(ActionEventArgs<TrainModel> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            TrainParamsUpdated.InvokeAsync(args.Data);
            ShowToolbar = false;
        }
    }

    public void AddTrain(TrainModel train)
    {
        Grid.AddRecord(train);
    }

    public async Task StateChanged()
    {
        await Grid.CallStateHasChangedAsync();
        StateHasChanged();
    }

    public void DeleteTrain(TrainModel train)
    {
        Grid.DeleteRecord(null, train);
    }
}
