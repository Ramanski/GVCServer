@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@inject StationAssistant.Services.IStationDataService StationData

<div class="row">
    <div class="col-6 m-1">
        @if (availablePaths?.Any() ?? false)
        {
            <SfDropDownList TValue="int" 
                    DataSource="@availablePaths" 
                    TItem="PathData" 
                    Width="350px"
                    Placeholder="Выберите доступный путь" 
                    @bind-Value="@PathId">
                <DropDownListFieldSettings GroupBy="Area" Text="Description" Value="Id"></DropDownListFieldSettings>
            </SfDropDownList>
        }
    </div>
</div>

@code {
    [Parameter] public TrainModel selectedTrain { get; set; }
    [Parameter] public bool ShowArrivingPathsOnly { get; set; } = false;
    [Parameter] public bool isDeparting { get; set; } = false;
    public List<PathData> availablePaths { get; set; }
    public int PathId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        availablePaths = (await StationData.GetAvailablePaths(selectedTrain, ShowArrivingPathsOnly, isDeparting))
                                           .Select(p => new PathData()
                                           {
                                               Id = p.Id,
                                               Area = p.Area,
                                               Description = String.Format($"№{ p.PathNum } - { p.Length } усл.ваг. { p.Marks?.Trim() }")
                                           })
                                           .ToList();
    }

    public class PathData
    {
        public int Id { get; set; }
        public string Area { get; set; }
        public string Description { get; set; }
    }
}
