@page "/info"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@inject StationAssistant.Services.IStationDataService StationData
@attribute [AuthorizeRoles(Role.Admin, Role.DSC, Role.DSP)]

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="control-section">
        <SfChart Title="Рода вагонов по станции" Theme="ChartTheme.Bootstrap4">
            <ChartArea><ChartAreaBorder Width="1"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="LabelIntersectAction.Rotate45">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Title="Вагоны" Minimum="0" Maximum="@(paths.Max(p => p.Occupation) + 10)" Interval="5" LabelFormat="{value}">
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
                <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            </ChartPrimaryYAxis>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@DataSource" XName="xname" YName="kr" Width="2" Name="Крытый" Type="ChartSeriesType.StackingColumn">
                </ChartSeries>
                <ChartSeries DataSource="@DataSource" XName="xname" YName="pl" Width="2" Name="Платформа" Type="ChartSeriesType.StackingColumn">
                </ChartSeries>
                <ChartSeries DataSource="@DataSource" XName="xname" YName="ps" Width="2" Name="Пассажирский" Type="ChartSeriesType.StackingColumn">
                </ChartSeries>
                <ChartSeries DataSource="@DataSource" XName="xname" YName="pv" Width="2" Name="Полувагон" Type="ChartSeriesType.StackingColumn">
                </ChartSeries>
                <ChartSeries DataSource="@DataSource" XName="xname" YName="cs" Width="2" Name="Цистерна" Type="ChartSeriesType.StackingColumn">
                </ChartSeries>
                <ChartSeries DataSource="@DataSource" XName="xname" YName="rf" Width="2" Name="Рефрижераторный" Type="ChartSeriesType.StackingColumn">
                </ChartSeries>
                <ChartSeries DataSource="@DataSource" XName="xname" YName="pr" Width="2" Name="Прочие" Type="ChartSeriesType.StackingColumn">
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        </SfChart>
    </div>
}


@code {
    public List<StackedColumnChartData> DataSource { get; set; }
    public List<PathModel> paths { get; set; }
    private bool isLoading { get; set; } = true;

    public class StackedColumnChartData
    {
        public string xname { get; set; }
        public double ps { get; set; }
        public double kr { get; set; }
        public double pl { get; set; }
        public double pv { get; set; }
        public double cs { get; set; }
        public double rf { get; set; }
        public double pr { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        paths = await StationData.GetPaths();
        await SetupGraphic();
        isLoading = false;
    }

    private async Task SetupGraphic()
    {
        DataSource = new List<StackedColumnChartData>();
        var wagonsOnStation = await StationData.GetVagons();

        foreach (PathModel path in paths.Where(p => p.Occupation != 0))
        {
            var vagonsOnPath = wagonsOnStation.Where(wagon => path.Id == wagon.PathId);

            StackedColumnChartData data = new StackedColumnChartData()
            {
                xname = $"{path.Area}-{path.PathNum} ({path.Marks?.Trim()})",
                ps = vagonsOnPath.Where(v => v.Kind == 1).Count(),
                kr = vagonsOnPath.Where(v => v.Kind == 20).Count(),
                pl = vagonsOnPath.Where(v => v.Kind == 40).Count(),
                pv = vagonsOnPath.Where(v => v.Kind == 60).Count(),
                cs = vagonsOnPath.Where(v => v.Kind >= 70 && v.Kind <= 79).Count(),
                rf = vagonsOnPath.Where(v => v.Kind >= 80 && v.Kind <= 89).Count()
            };
            data.pr = path.Occupation - (data.ps + data.kr + data.pl + data.pv + data.cs + data.rf);
            DataSource.Add(data);
        }
    }
}
