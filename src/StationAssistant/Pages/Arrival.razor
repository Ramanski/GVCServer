@page "/arrival"
@inject StationAssistant.Services.IGvcDataService GvcDataFetch
@inject StationAssistant.Services.IStationDataService StationData
@implements IDisposable
@inject StationAssistant.Services.NotificationService NotificationService

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Popups
@using System.Timers
@attribute [AuthorizeRoles(Role.Admin, Role.DSC, Role.DSP)]

<div class="col-lg-12 control-section">
    <h3 class="text-center"> Прогноз прибытия поездов </h3>
    <div class="row">
        <div class="col-xs-4 col-sm-6 col-lg-12 col-md-12">
            <SfButton Disabled="!ArrivingTrainIsSelected" IsPrimary="true" IconCss="e-icons e-arriving" OnClick="(async() => await Arrived())">Прибытие поезда</SfButton>
            <SfButton Disabled="!ArrivingTrainIsSelected" IsPrimary="false" IconCss="e-icons e-tgnl" OnClick="(async() => await GetDetails())">Получить ТГНЛ</SfButton>
            <SfButton Disabled="!ArrivingTrainIsSelected" IsPrimary="false" IconCss="e-icons e-arriving-path" OnClick="(() => onOpenPathSelector(true))">Выбрать путь</SfButton>
            <SfProgressButton CssClass="float-right" IconCss="e-icons e-refresh" OnClick="(() => updateArrivingList(null, null))">
                <ProgressButtonSpinSettings Position="SpinPosition.Center"></ProgressButtonSpinSettings>
                <ProgressButtonAnimationSettings Effect="AnimationEffect.ZoomOut"></ProgressButtonAnimationSettings>
            </SfProgressButton>
        </div>
    </div>
    <div class="content-wrapper">
        <div class="row">
            <TrainList @ref="arrivingList" trainList="arrivingTrains" ShowDislAndOper="true" IsSelected="@(() => { ArrivingTrainIsSelected = true; })" IsDeselected="@(() => { ArrivingTrainIsSelected = false; })"></TrainList>
        </div>
    </div>
</div>
<div class="col-lg-12 control-section mt-1">
    <h3 class="text-center"> Прибывшие поезда </h3>
    <div class="col-xs-4 col-sm-6 col-lg-12 col-md-12">
        <SfButton IsPrimary="true" Disabled="@(!ArrivedTrainIsSelected)" IconCss="e-icons e-arriving-cancel" OnClick="(async() => await CancelArrival())">Отмена прибытия</SfButton>
        <SfButton IsPrimary="false" Disabled="@(!ArrivedTrainIsSelected)" IconCss="e-icons e-disband" OnClick="(async() => await Disband())">Расформировать</SfButton>
        <SfButton IsPrimary="false" Disabled="@(!ArrivedTrainIsSelected)" IconCss="e-icons e-relocate" OnClick="(() => onOpenPathSelector(false))">Другой путь</SfButton>
    </div>
    <div class="content-wrapper">
        <div class="row">
            <TrainList @ref="arrivedList" trainList="arrivedTrains" IsSelected="@(() => { ArrivedTrainIsSelected = true; })" IsDeselected="@(() => { ArrivedTrainIsSelected = false; })"></TrainList>
        </div>
    </div>
</div>

@if (TrainListVisible || PathSelectorVisible)
{
    <ConfirmModal Title="@TitleModal" DialogClose="onCloseModal" OverlayClick="onCloseModal" OKClick="onOK" Width=@(PathSelectorVisible?"450":"850") Height="@(PathSelectorVisible?"180":"80%")">
        @if (TrainListVisible)
        {
            if (selectedTrainModel != null)
            {
                <div class="container-fluid mb-2" id="tbl" style="text-align: center;font-size: medium;">
                    <table class="border container-fluid">
                        <thead>
                            <tr>
                                <td>Станция формирования</td>
                                <td>№ состава</td>
                                <td>Станция назначения</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    @selectedTrainModel.Index?.Substring(0, 4)
                                </td>
                                <td>
                                    @selectedTrainModel.Index?.Substring(5, 3)
                                </td>
                                <td>
                                    @selectedTrainModel.Index?.Substring(9, 4)
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <table class="border container-fluid">
                        <thead>
                            <tr>
                                <td>Голова 1 Хвост 2</td>
                                <td>Число</td>
                                <td>Месяц</td>
                                <td>Часы</td>
                                <td>Мин</td>
                                <td>Условная длина</td>
                                <td>Масса брутто</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>1</td>
                                <td>@selectedTrainModel.DateOper.Day</td>
                                <td>@selectedTrainModel.DateOper.Month</td>
                                <td>@selectedTrainModel.DateOper.Hour</td>
                                <td>@selectedTrainModel.DateOper.Minute</td>
                                <td>@selectedTrainModel.Length</td>
                                <td>@selectedTrainModel.WeightBrutto</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            }
            <SfGrid DataSource="@selectedTrainModel.Wagons" EnableVirtualization="false" AllowSorting="true">
                <GridColumns>
                    <GridColumn Field=@nameof(WagonModel.SequenceNum) HeaderText="№" Width="25"></GridColumn>
                    <GridColumn Field=@nameof(WagonModel.Num) HeaderText="Номер" TextAlign="TextAlign.Left" IsPrimaryKey="true" Width="60"></GridColumn>
                    <GridColumn Field=@nameof(WagonModel.Kind) HeaderText="Род" Width="45"></GridColumn>
                    <GridColumn Field=@nameof(WagonModel.Destination) HeaderText="Назначение" Width="70"></GridColumn>
                    <GridColumn Field=@nameof(WagonModel.Ksob) HeaderText="Собств" Width="55"></GridColumn>
                    <GridColumn Field=@nameof(WagonModel.Tvag) HeaderText="Тара" Width="45"></GridColumn>
                    <GridColumn Field=@nameof(WagonModel.WeightNetto) HeaderText="Вес" Width="50"></GridColumn>
                    <GridColumn Field=@nameof(WagonModel.Mark) HeaderText="Отметки" Width="75"></GridColumn>
                </GridColumns>
            </SfGrid>
        }
        else if (PathSelectorVisible)
        {
            <PathSelector @ref="pathSelector" selectedTrain="selectedTrainModel" isArriving="ShowArrivingPathsOnly" />
        }
    </ConfirmModal>

    <SfDialog @bind-Visible="@CancelConfirmVisible" Width="400px" Target="#target" ShowCloseIcon="true" Header="@Title" Content="@Body">
        <DialogButtons>
            <DialogButton Content="Да" IsPrimary="true" OnClick="(async() => await CancelArrival())" />
            <DialogButton Content="Нет" OnClick="(() => { CancelConfirmVisible = false; })" />
        </DialogButtons>
    </SfDialog>
}

<style>
</style>


@code {

    PathSelector pathSelector;
    TrainList arrivingList;
    TrainList arrivedList;
    private List<TrainModel> arrivingTrains { get; set; }
    private List<TrainModel> arrivedTrains { get; set; }
    private List<PathModel> paths { get; set; }
    [CascadingParameter] public string Message { get; set; }
    TrainModel selectedTrainModel;
    private string TitleModal { get; set; }
    private bool TrainListVisible { get; set; } = false;
    private bool PathSelectorVisible { get; set; } = false;
    private bool CancelConfirmVisible { get; set; } = false;
    //    private bool DataIsLoaded = false;
    private bool ShowArrivingPathsOnly = false;
    public bool ArrivingTrainIsSelected { get; set; } = false;
    public bool ArrivedTrainIsSelected { get; set; } = false;
    Timer timer;
    private string Title;
    private string Body;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userId =
            arrivedTrains = await StationData.GetArrivedTrainsAsync();
            arrivingTrains = await GvcDataFetch.GetArrivingTrains();
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, $"Не удалось загрузить поезда");
            }
        }

        timer = new Timer();
        // 40 seconds between refreshing arriving trains list
        timer.Interval = 40000;
        timer.Elapsed += updateArrivingList;
        timer.Start();
    }

    public void Dispose()
    {
        timer.Stop();
    }

    class CompareTrains : IEqualityComparer<TrainModel>
    {
        public bool Equals(TrainModel x, TrainModel y)
        {
            if (x.Index == y.Index)
            {
                return true;
            }
            else { return false; }
        }
        public int GetHashCode(TrainModel trmod)
        {
            return 0;
        }
    }

    private async void updateArrivingList(object sender, EventArgs e)
    {
        Console.WriteLine("update Arriving List");
        List<TrainModel> newList = await GvcDataFetch.GetArrivingTrains();

        var addedTrains = newList.Except(arrivingTrains, new CompareTrains());
        if (addedTrains.Any())
        {
            arrivingTrains.AddRange(addedTrains);
            foreach (TrainModel newTrain in addedTrains)
                arrivingList.AddTrain(newTrain);
            await InvokeAsync(() => NotificationService.SetMessage(TypeNotification.Info, "Добавлены новые прибывающие поезда"));
        }
    }

    private async Task GetDetails()
    {
        if (arrivingList.selectedTrain == null)
        {
            NotificationService.SetMessage(TypeNotification.Info, "Выберите поезд из списка");
            return;
        }
        try
        {
            selectedTrainModel = await GvcDataFetch.GetTrainInfo(arrivingList.selectedTrain.Index);
        }
        catch (Exception)
        {
            NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить операцию");
        }
        onOpenList();
        StateHasChanged();
    }

    void onCloseModal()
    {
        PathSelectorVisible = false;
        TrainListVisible = false;
    }

    void onOpenList()
    {
        TitleModal = "Телеграмма-натурный лист поезда №" + selectedTrainModel.Num;
        TrainListVisible = true;
    }

    async Task onOK()
    {
        if (PathSelectorVisible && pathSelector != null)
        {
            try
            {

                if (ShowArrivingPathsOnly)
                {
                    var train = arrivingList.selectedTrain;
                    train.Path = await StationData.GetPathAsync(pathSelector.PathId);
                    arrivingList.UpdateSelectedRow(train);
                    NotificationService.SetMessage(TypeNotification.Success, $"Путь прибытия для поезда №{selectedTrainModel.Num} установлен");
                }
                else
                {
                    var train = arrivedList.selectedTrain;
                    await StationData.RelocateTrain(selectedTrainModel.Index, pathSelector.PathId);
                    train.Path = await StationData.GetPathAsync(pathSelector.PathId);
                    arrivedList.UpdateSelectedRow(train);
                    NotificationService.SetMessage(TypeNotification.Success, $"Перестановка поезда №{selectedTrainModel.Num} на другой путь завершена");
                }
            }
            catch (Exception)
            {
                NotificationService.SetMessage(TypeNotification.Error, "Не удалось установить путь для поезда");
            }
        }
        onCloseModal();
    }

    void onOpenPathSelector(bool ShowOnlyArriving)
    {
        selectedTrainModel = (ShowOnlyArriving ? arrivingList.selectedTrain : arrivedList.selectedTrain);
        if (selectedTrainModel == null)
        {
            NotificationService.SetMessage(TypeNotification.Info, "Выберите поезд из списка");
            return;
        }
        ShowArrivingPathsOnly = ShowOnlyArriving;
        TitleModal = $"Выбор пути для поезда {selectedTrainModel.Num}";
        PathSelectorVisible = true;
    }

    private async Task Arrived()
    {
        selectedTrainModel = arrivingList.selectedTrain;

        if (selectedTrainModel == null)
        {
            NotificationService.SetMessage(TypeNotification.Info, "Выберите поезд из списка");
            return;
        }
        else if (selectedTrainModel.Path == null)
        {
            NotificationService.SetMessage(TypeNotification.Warning, "Выберите путь приема");
            return;
        }

        try
        {
            await GvcDataFetch.SendTrainArrivedAsync(selectedTrainModel.Index, DateTime.Now);
            await StationData.AddTrainAsync(selectedTrainModel.Index, DateTime.Now, selectedTrainModel.Path.Id);
            arrivingList.DeleteTrain(selectedTrainModel);
            selectedTrainModel.DateOper = DateTime.Now;
            arrivedList.AddTrain(selectedTrainModel);
            await StationData.UpdatePathOccupation(selectedTrainModel.Path.Id);
            NotificationService.SetMessage(TypeNotification.Success, $"Операция по прибытию поезда №{selectedTrainModel.Num} завершена");
            await arrivingList.DeselectRow();
            await arrivedList.DeselectRow();
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить операцию");
            }
            return;
        }
    }

    void onCancel()
    {
        Title = "Отмена прибытия поезда";
        Body = $"Отменить ранее переданное сообщение о прибытии поезда {arrivedList.selectedTrain.Num}?";
        CancelConfirmVisible = true;
    }

    private async Task CancelArrival()
    {
        TrainModel train = arrivedList.selectedTrain;
        CancelConfirmVisible = true;

        if (train == null)
        {
            NotificationService.SetMessage(TypeNotification.Info, "Выберите поезд из списка прибывших");
            return;
        }

        try
        {
            await GvcDataFetch.CancelOperation(train.Index, 201);
            await StationData.DeleteTrainAsync(train.Index);
            arrivedList.DeleteTrain(train);
            arrivingList.AddTrain(train);
            await arrivedList.DeselectRow();
            await arrivingList.DeselectRow();
            await StationData.UpdatePathOccupation(train.Path.Id);
            NotificationService.SetMessage(TypeNotification.Success, $"Операция по отмене прибытия поезда №{train.Num} проведена успешно");
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить операцию");
            }
        }
    }

    private async Task Disband()
    {
        try
        {
            await GvcDataFetch.SendDisbanding(arrivedList.selectedTrain.Index, DateTime.Now);
            await StationData.DisbandTrain(arrivedList.selectedTrain);
            NotificationService.SetMessage(TypeNotification.Success, $"Операция по расформированию поезда №{arrivedList.selectedTrain.Num} завершена");
            arrivedList.DeleteTrain(arrivedList.selectedTrain);
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else if (e is AggregateException)
            {
                foreach (Exception innerException in (e as AggregateException).InnerExceptions)
                {
                    NotificationService.SetMessage(TypeNotification.Warning, innerException.Message);
                }
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить операцию");
            }
        }
    }
}
