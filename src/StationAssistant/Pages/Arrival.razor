@page "/arrival"

@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups

@inject StationAssistant.Services.IGvcDataService GvcDataFetch
@inject StationAssistant.Services.IStationDataService StationData
@inject StationAssistant.Services.NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authProvider

@attribute [AuthorizeRoles(Role.Admin, Role.DSC, Role.DSP)]

<div class="col-lg-12 control-section">
    <h3 class="text-center"> Прогноз прибытия поездов </h3>
    <div class="row">
        <div class="col-xs-4 col-sm-6 col-lg-12 col-md-12">
            <SfButton Disabled="selectedArrivingTrain == null" IsPrimary="true" IconCss="e-icons e-arriving"
                      OnClick="(() => { selectedTrain = selectedArrivingTrain; PathSelectorVisible = true; })">
                Оформить прибытие
            </SfButton>
            <SfButton Disabled="selectedArrivingTrain == null" IsPrimary="false" IconCss="e-icons e-tgnl"
                      OnClick="(() => { selectedTrain = selectedArrivingTrain; TrainCompositionVisible = true; })">
                Получить ТГНЛ
            </SfButton>
        </div>
    </div>
    <div class="content-wrapper">
        <div class="row">
            <TrainList @ref="arrivingTrainList" trainList="arrivingTrains" IsOnStation="false" Height="230"
                       isVisibleSpinner="arrivingTrains == null"
                       IsTrainSelected="(async () => { selectedArrivingTrain = arrivingTrainList.selectedTrain; 
                                                       await arrivedTrainList.ClearSelections(); })"
                       IsTrainDeselected="(() => selectedArrivingTrain = null)" />
        </div>
    </div>
</div>
<div class="col-lg-12 control-section mt-1">
    <h3 class="text-center"> Прибывшие поезда </h3>
    <div class="col-xs-4 col-sm-6 col-lg-12 col-md-12">
        <SfButton IsPrimary="true" Disabled="selectedArrivedTrain == null" IconCss="e-icons e-disband"
                  OnClick="(async() => await Disband())">
            Расформировать
        </SfButton>
        <SfButton IsPrimary="false" Disabled="selectedArrivedTrain == null" IconCss="e-icons e-relocate"
                  OnClick="(() => { selectedTrain = selectedArrivedTrain; PathSelectorVisible = true; })">
            Переставить состав
        </SfButton>
        <SfButton Disabled="selectedArrivedTrain == null" IsPrimary="false" IconCss="e-icons e-tgnl"
                  OnClick="(() => { selectedTrain = selectedArrivedTrain; TrainCompositionVisible = true; })">
            Получить ТГНЛ
        </SfButton>
        <SfButton IsPrimary="false" Disabled="selectedArrivedTrain == null" IconCss="e-icons e-arriving-cancel"
                  OnClick="(() => CancelDialogIsVisible = true)">
            Отменить прибытие
        </SfButton>
    </div>
    <div class="content-wrapper">
        <div class="row">
            <TrainList @ref="arrivedTrainList" trainList="arrivedTrains" IsOnStation="true" Height="230"
                       isVisibleSpinner="arrivedTrains == null"
                       IsTrainSelected="(async () => { selectedArrivedTrain = arrivedTrainList.selectedTrain; 
                                                       await arrivingTrainList.ClearSelections(); })"
                       IsTrainDeselected="(() => selectedArrivedTrain = null)" />
        </div>
    </div>
</div>


@if (TrainCompositionVisible)
{
    <ConfirmModal Title="@String.Format($"Телеграмма-натурный лист поезда №{selectedTrain.Num}")"
              DialogClose="@(() => TrainCompositionVisible = false)"
              OverlayClick="@(() => TrainCompositionVisible = false)"
              OKClick="@(() => TrainCompositionVisible = false)"
              Width="850" Height="80%">
        <TrainComposition TrainId="selectedTrain.Id" />
    </ConfirmModal>
}
else if (PathSelectorVisible)
{
    var title = String.Format($"Путь {(selectedArrivingTrain != null ? "прибытия" : "")} для поезда №{ selectedTrain.Num }");

    <ConfirmModal Title="@title"
              DialogClose="@(() => PathSelectorVisible = false)"
              OverlayClick="@(() => PathSelectorVisible = false)"
              OKClick="@(async () => await onPathSelected(pathSelector.PathId))"
              Width="450px" Height="180px">
        <PathSelector @ref="pathSelector" selectedTrain="selectedTrain"
                  ShowArrivingPathsOnly="selectedTrain == selectedArrivingTrain" />
    </ConfirmModal>
}
else if (CancelDialogIsVisible)
{
    <SfDialog Header="Отмена прибытия поезда" Width="400px" ShowCloseIcon="true"
          Content="@String.Format($@"Отменить ранее переданное сообщение
                                     о прибытии поезда {arrivedTrainList.selectedTrain.Num}?")">
        <DialogButtons>
            <DialogButton Content="Да" IsPrimary="true"
                      OnClick="(async() => { CancelDialogIsVisible = false; await CancelArrival(); })" />
            <DialogButton Content="Нет" OnClick="(() => { CancelDialogIsVisible = false; })" />
        </DialogButtons>
    </SfDialog>
}

@code {
    PathSelector pathSelector;
    TrainList arrivingTrainList;
    TrainList arrivedTrainList;
    TrainModel selectedArrivingTrain;
    TrainModel selectedArrivedTrain;
    TrainModel selectedTrain;
    private List<TrainModel> arrivingTrains { get; set; }
    private List<TrainModel> arrivedTrains { get; set; }
    private bool TrainCompositionVisible { get; set; } = false;
    private bool PathSelectorVisible { get; set; } = false;
    private bool CancelDialogIsVisible { get; set; } = false;

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // TODO: Run task in parallel
            arrivingTrains = await GvcDataFetch.GetArrivingTrains();
            arrivedTrains = await StationData.GetArrivedTrainsAsync();
        }
        catch (Exception e)
        {
            if (e is RailProcessException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, $"Не удалось загрузить поезда");
            }
        }

        // TODO: Move to subscribe to service
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/trainshub")).Build();
        hubConnection.On<string, TrainModel>("TrainArrived", async (user, train) =>
            {
                NotificationService.SetMessage(user, $"Поезд {train.Num} прибыл на станцию");
                await arrivingTrainList.DeleteTrain(train);
                await arrivedTrainList.AddTrain(train);
            });
        await hubConnection.StartAsync();
    }

    // TODO: Move to service
    async Task NotifyArrived(TrainModel train)
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var userName = authState.User.Identity.Name;
        await hubConnection.SendAsync("SendArrived", userName, train);
    }

    // TODO: Move to unsubscribe to service
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    async Task onPathSelected(int selectedPathId)
    {
        PathSelectorVisible = false;

        if (selectedArrivingTrain != null)
        {
            await Arrived(selectedPathId);
        }
        else if (selectedArrivedTrain != null)
        {
            await Relocate(selectedPathId);
        }
    }

    private async Task Relocate(int pathId)
    {
        try
        {
            await StationData.RelocateTrain(selectedArrivedTrain.Id, pathId);
            selectedArrivedTrain.Path = await StationData.GetPathAsync(pathId);
            arrivedTrainList.UpdateSelectedRow(selectedArrivedTrain);
            NotificationService.SetMessage(
                TypeNotification.Success,
                $"Перестановка поезда №{selectedArrivedTrain.Num} на другой путь завершена");
        }
        catch (Exception)
        {
            NotificationService.SetMessage(TypeNotification.Error, "Не удалось установить путь для поезда");
        }
    }

    private async Task Arrived(int pathId)
    {
        try
        {
            selectedArrivingTrain.Path = await StationData.GetPathAsync(pathId);
            await GvcDataFetch.SendTrainArrivedAsync(selectedArrivingTrain.Id, DateTime.Now);
            await StationData.AddTrainAsync(selectedArrivingTrain.Id, DateTime.Now, selectedArrivingTrain.Path.Id);
            await NotifyArrived(selectedArrivingTrain);
        }
        catch (Exception e)
        {
            if (e is RailProcessException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить операцию");
            }
            await CancelArrival();
        }
        arrivingTrainList.ClearSelections();
        arrivedTrainList.ClearSelections();
    }

    private async Task CancelArrival()
    {
        TrainModel train = arrivedTrainList.selectedTrain;

        try
        {
            await GvcDataFetch.CancelMovingOperation(train.Id, ModelsLibrary.Codes.OperationCode.TrainArrival);
            await StationData.DeleteTrainAsync(train.Id);
        }
        catch (Exception exception)
        {
            if (exception is RailProcessException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, exception.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить отмену прибытия");
            }
        }

        await arrivedTrainList.DeleteTrain(train);
        await arrivingTrainList.AddTrain(train);
        NotificationService.SetMessage(TypeNotification.Success, $"Операция по отмене прибытия поезда №{train.Num} проведена успешно");
    }

    private async Task Disband()
    {
        try
        {
            await GvcDataFetch.SendDisbanding(arrivedTrainList.selectedTrain.Id, DateTime.Now);
            await StationData.DisbandTrain(arrivedTrainList.selectedTrain);
            NotificationService.SetMessage(TypeNotification.Success, $"Операция по расформированию поезда №{arrivedTrainList.selectedTrain.Num} завершена");
            arrivedTrainList.DeleteTrain(arrivedTrainList.selectedTrain);
        }
        catch (Exception e)
        {
            if (e is RailProcessException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else if (e is AggregateException)
            {
                foreach (Exception innerException in (e as AggregateException).InnerExceptions)
                {
                    NotificationService.SetMessage(TypeNotification.Warning, innerException.Message);
                }
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить операцию");
            }
        }
    }
}
