@page "/departure"

@using Microsoft.AspNetCore.Authentication.JwtBearer;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@inject StationAssistant.Services.NotificationService NotificationService
@inject StationAssistant.Services.IGvcDataService GvcDataFetch
@inject StationAssistant.Services.IStationDataService StationData
@attribute [Authorize]

<SfDialog @bind-Visible="@ConfirmIsVisible" Width="400px" ShowCloseIcon="true" 
        Header="Подтвердите действие" Content="@String.Format($"Отправить поезд { selectedTrain?.Num } со станции ?")">
    <DialogButtons>
        <DialogButton Content="Да" IsPrimary="true" OnClick="(async() => { ConfirmIsVisible = false; await Depart(); })" />
        <DialogButton Content="Нет" OnClick="(() => { ConfirmIsVisible = false; })" />
    </DialogButtons>
</SfDialog>


<h3> Прогноз отправления поездов </h3>
<div class="row">

    <div class="col-xs-6 col-sm-6 col-lg-12 col-md-12">
        <SfButton OnClick="(() => ConfirmIsVisible = true)" Disabled="(selectedTrain?.Num == 0 || selectedTrain == null)" IsPrimary="true" IconCss="e-icons e-depart">
            Отправить поезд
        </SfButton>

        <SfButton OnClick="(() => TrainCompositionVisible = true)" Disabled="selectedTrain == null" IsPrimary="false" IconCss="e-icons e-tgnl">
            Получить ТГНЛ
        </SfButton>

        <SfButton OnClick="(async () => await onGetDepartureRoute())" Disabled="selectedTrain == null" IsPrimary="false" IconCss="e-icons e-schedule-icon">
            Назначить нитку ГДП
        </SfButton>

        <SfButton OnClick="(() => PathSelectorIsVisible = true)" Disabled="selectedTrain == null" IsPrimary="false" IconCss="e-icons e-relocate">
            Переставить состав
        </SfButton>
    </div>
</div>
<div class="content-wrapper">
    <TrainList @ref="departingList" trainList="departingTrains" IsOnStation="true" Height="500px"
               AllowEditing="true" TrainParamsUpdated="@TrainParamsUpdated"
               IsTrainSelected="(() => selectedTrain = departingList?.selectedTrain)"
               IsTrainDeselected="(() => selectedTrain = null)" />
</div>

@if (TrainCompositionVisible)
{
    <ConfirmModal Title="@String.Format($"Телеграмма-натурный лист поезда { selectedTrain?.Index }")"
              DialogClose="@(() => TrainCompositionVisible = false)"
              OverlayClick="@(() => TrainCompositionVisible = false)"
              OKClick="@(() => TrainCompositionVisible = false)"
              Width="850" Height="80%">
        <TrainComposition TrainId="selectedTrain.Id" />
    </ConfirmModal>
}
else if (PathSelectorIsVisible)
{
    <ConfirmModal Title="@String.Format($"Путь отправления поезда { selectedTrain?.Index }")" Width="550" Height="180" 
            DialogClose="(() => PathSelectorIsVisible = false)" 
            OverlayClick="(() => PathSelectorIsVisible = false)"
            OKClick="(async () => await onPathSelected(pathSelector.PathId))">
        <PathSelector @ref="pathSelector" selectedTrain="selectedTrain" ShowDepartingPathsOnly="true"></PathSelector>
    </ConfirmModal>
}


@code {

    PathSelector pathSelector;
    TrainList departingList;

    private TrainModel selectedTrain { get; set; }
    private List<TrainModel> departingTrains { get; set; }

    private bool PathSelectorIsVisible { get; set; } = false;
    private bool TrainCompositionVisible { get; set; } = false;
    private bool ConfirmIsVisible { get; set; } = false;
    private string Body;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            departingTrains = await StationData.GetDepartingTrains();
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, $"Не удалось загрузить поезда");
            }
        }
    }

    public async Task TrainParamsUpdated(TrainModel updatedModel)
    {
        try
        {
            await StationData.UpdateTrain(updatedModel);
            NotificationService.SetMessage(TypeNotification.Success, $"Для поезда №{updatedModel.Num} внесены корректировки");
        }
        catch (Exception)
        {
            NotificationService.SetMessage(TypeNotification.Error, $"Не удалось сохранить изменения");
        }
    }

    async Task onPathSelected(int pathId)
    {
        try
        {
            await StationData.RelocateTrain(selectedTrain.Id, pathId);
            selectedTrain.Path = await StationData.GetPathAsync(pathId);
            departingList.UpdateSelectedRow(selectedTrain);
            NotificationService.SetMessage(TypeNotification.Success, $"Перестановка поезда { selectedTrain.Index } выполнена");
        }
        catch (Exception)
        {
            NotificationService.SetMessage(TypeNotification.Error, $"Не удалось выполнить перестановку состава");
        }
        PathSelectorIsVisible = false;
    }

    async Task onGetDepartureRoute()
    {
        try
        {
            var train = selectedTrain;
            TrainModel trainModel = await StationData.SetDepartureRoute(train);
            departingList.UpdateSelectedRow(trainModel);
            NotificationService.SetMessage(TypeNotification.Success, $"Для поезда {trainModel.Index} установлен №{trainModel.Num} и время отправления {trainModel.DateOper.ToShortTimeString()}");
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, $"Не удалось выполнить операцию");
            }
        }
    }

    private async Task Depart()
    {
        try
        {
            await StationData.TrainDeparture(selectedTrain.Id);
            departingList.DeleteTrain(selectedTrain);
            NotificationService.SetMessage(TypeNotification.Success, $"Операция по отправлению поезда №{selectedTrain.Num} проведена успешно");
        }
        catch (Exception e)
        {
            if (e is HttpRequestException || e is ArgumentException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, $"Не удалось отправить поезд");
            }
        }
    }

}
