@page "/paths"
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@inject StationAssistant.Services.IStationDataService StationData
@attribute [Authorize]

@if (!dataIsLoaded)
{
    <p>Loading...</p>
}
else
{
<div class="container my-1">
    <table>
        <tr>
            <td>Только сортировочные пути</td>
            <td><SfSwitch @bind-Checked="@isSort" TChecked="bool" EnablePersistence="true" ValueChange="(async () => await onPathSortChange())"></SfSwitch></td>
        </tr>
        <tr>
            <td>Только занятые пути</td>
            <td><SfSwitch @bind-Checked="@isEmpty" TChecked="bool" EnablePersistence="true" ValueChange="(async () => await onPathSortChange())"></SfSwitch></td>
        </tr>
    </table>
    @*<div class="col-6 ml-1">
        <label>Только сортировочные пути</label>
        <SfSwitch @bind-Checked="@isSort" TChecked="bool" EnablePersistence="true" ValueChange="(async () => await onPathSortChange())"></SfSwitch>
    </div>
    <div class="col-6 ml-1">
        <label>Только занятые пути</label>
        <SfSwitch @bind-Checked="@isEmpty" TChecked="bool" EnablePersistence="true" ValueChange="(async () => await onPathSortChange())"></SfSwitch>
    </div>*@
</div>
    <SfTab @ref="Tab">
        <TabItems>
            @foreach (string area in areas)
            {
                <TabItem Content="@area">
                    <ChildContent>
                        <TabHeader Text="@area"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <Paths Area="@area" @ref="pathsComoponent" @key="@area" isSort="isSort" isEmpty="isEmpty"></Paths>
                    </ContentTemplate>
                </TabItem>
            }
        </TabItems>
    </SfTab>

}


@code {
    Paths pathsComoponent;
    SfTab Tab;
    public bool isSort { get; set; } = false;
    public bool isEmpty { get; set; } = false;
    private string[] areas { get; set; }
    private string currentArea { get; set; }
    bool dataIsLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        areas = await StationData.GetAreasAsync();
        currentArea = areas[0];
        dataIsLoaded = true;
    }

    private async Task onPathSortChange()
    {
        await pathsComoponent.GetPaths(isSort, isEmpty);
    }
}
