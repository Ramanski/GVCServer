// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StationAssistant.Data.Entities;

namespace StationAssistant.Migrations
{
    [DbContext(typeof(StationStorageContext))]
    partial class StationStorageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StationAssistant.Data.Entities.Direction", b =>
                {
                    b.Property<string>("StationDestination")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<short>("DirectionId")
                        .HasColumnType("smallint");

                    b.Property<byte>("MaxLength")
                        .HasColumnType("tinyint");

                    b.Property<short>("MaxWeight")
                        .HasColumnType("smallint");

                    b.Property<string>("PreferenceAreaArrival")
                        .IsRequired()
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<byte>("ReqLength")
                        .HasColumnType("tinyint");

                    b.Property<short>("ReqWeight")
                        .HasColumnType("smallint");

                    b.Property<string>("Track")
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.HasKey("StationDestination");

                    b.ToTable("Direction");
                });

            modelBuilder.Entity("StationAssistant.Data.Entities.Path", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<bool>("Arrival")
                        .HasColumnType("bit");

                    b.Property<bool>("Departure")
                        .HasColumnType("bit");

                    b.Property<bool>("Even")
                        .HasColumnType("bit");

                    b.Property<short>("Length")
                        .HasColumnType("smallint");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<string>("Marks")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<short>("Occupation")
                        .HasColumnType("smallint");

                    b.Property<bool>("Odd")
                        .HasColumnType("bit");

                    b.Property<bool>("Passenger")
                        .HasColumnType("bit");

                    b.Property<string>("PathNum")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<short?>("Pfdirection")
                        .HasColumnName("PFDirection")
                        .HasColumnType("smallint");

                    b.Property<bool>("Sort")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Path");
                });

            modelBuilder.Entity("StationAssistant.Data.Entities.Station", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<bool?>("Department")
                        .HasColumnType("bit");

                    b.Property<string>("Mnemonic")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Code")
                        .HasName("PK_Stations");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("StationAssistant.Data.Entities.Train", b =>
                {
                    b.Property<string>("TrainIndex")
                        .HasColumnType("char(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOper")
                        .HasColumnType("datetime");

                    b.Property<string>("DestinationStation")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("FormStation")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FormTime")
                        .HasColumnType("datetime");

                    b.Property<short>("Length")
                        .HasColumnType("smallint");

                    b.Property<short>("Ordinal")
                        .HasColumnType("smallint");

                    b.Property<string>("Oversize")
                        .HasColumnType("char(4)")
                        .IsFixedLength(true)
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<int?>("PathId")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<byte?>("TrainKindId")
                        .HasColumnType("tinyint");

                    b.Property<string>("TrainNum")
                        .HasColumnType("char(4)")
                        .IsFixedLength(true)
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<short>("WeightBrutto")
                        .HasColumnType("smallint");

                    b.HasKey("TrainIndex");

                    b.HasIndex("DestinationStation");

                    b.HasIndex("PathId");

                    b.HasIndex("TrainKindId");

                    b.ToTable("Train");
                });

            modelBuilder.Entity("StationAssistant.Data.Entities.TrainKind", b =>
                {
                    b.Property<byte>("Code")
                        .HasColumnType("tinyint");

                    b.Property<string>("Mnemocode")
                        .IsRequired()
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Code");

                    b.ToTable("TrainKind");
                });

            modelBuilder.Entity("StationAssistant.Data.Entities.Vagon", b =>
                {
                    b.Property<string>("Num")
                        .HasColumnType("char(8)")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateOper")
                        .HasColumnType("datetime");

                    b.Property<string>("Destination")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<short>("Kind")
                        .HasColumnType("smallint");

                    b.Property<short?>("Ksob")
                        .HasColumnName("KSOB")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Mark")
                        .HasColumnType("tinyint");

                    b.Property<int?>("PathId")
                        .HasColumnType("int");

                    b.Property<string>("PlanForm")
                        .HasColumnType("char(6)")
                        .IsFixedLength(true)
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<byte?>("SequenceNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TrainIndex")
                        .HasColumnType("char(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<short>("Tvag")
                        .HasColumnName("TVAG")
                        .HasColumnType("smallint");

                    b.Property<byte?>("VagonKindId")
                        .HasColumnType("tinyint");

                    b.Property<short?>("WeightNetto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Num");

                    b.HasIndex("PathId");

                    b.HasIndex("PlanForm");

                    b.HasIndex("TrainIndex");

                    b.HasIndex("VagonKindId");

                    b.ToTable("Vagon");
                });

            modelBuilder.Entity("StationAssistant.Data.Entities.VagonKind", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Mnemocode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(90)")
                        .HasMaxLength(90);

                    b.HasKey("Id");

                    b.ToTable("VagonKind");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StationAssistant.Data.Entities.Train", b =>
                {
                    b.HasOne("StationAssistant.Data.Entities.Station", "DestinationStationNavigation")
                        .WithMany("Train")
                        .HasForeignKey("DestinationStation")
                        .HasConstraintName("FK_Train_Station")
                        .IsRequired();

                    b.HasOne("StationAssistant.Data.Entities.Path", "Path")
                        .WithMany("Train")
                        .HasForeignKey("PathId")
                        .HasConstraintName("FK_Train_Path");

                    b.HasOne("StationAssistant.Data.Entities.TrainKind", "TrainKind")
                        .WithMany("Train")
                        .HasForeignKey("TrainKindId")
                        .HasConstraintName("FK_Train_TrainKind");
                });

            modelBuilder.Entity("StationAssistant.Data.Entities.Vagon", b =>
                {
                    b.HasOne("StationAssistant.Data.Entities.Path", "Path")
                        .WithMany("Vagon")
                        .HasForeignKey("PathId")
                        .HasConstraintName("FK_Direction_Path");

                    b.HasOne("StationAssistant.Data.Entities.Station", "PlanFormNavigation")
                        .WithMany("Vagon")
                        .HasForeignKey("PlanForm")
                        .HasConstraintName("FK_Vagon_Station");

                    b.HasOne("StationAssistant.Data.Entities.Train", "TrainIndexNavigation")
                        .WithMany("Vagon")
                        .HasForeignKey("TrainIndex")
                        .HasConstraintName("FK_Vagon_Train");

                    b.HasOne("StationAssistant.Data.Entities.VagonKind", "VagonKind")
                        .WithMany("Vagon")
                        .HasForeignKey("VagonKindId")
                        .HasConstraintName("FK_Vagon_VagonKind");
                });
#pragma warning restore 612, 618
        }
    }
}
