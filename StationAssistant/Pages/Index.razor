@page "/"
@using StationAssistant.Data.Entities;
@inject NotificationService NotificationService
@inject StationAssistant.Data.IStationDataService StationDataService
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <h3>Оператор: @context.User.Claims.Where(cl => cl.Type == System.Security.Claims.ClaimTypes.Role).FirstOrDefault()?.Value.ToLower() @context.User.Identity.Name</h3>
    </Authorized>
    <NotAuthorized>
        <h3>Авторизируйтесь для работы с приложением</h3>
    </NotAuthorized>
</AuthorizeView>

<div class="row">
    <div class="col-6 p-2">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Прибытие поездов</h5>
                <p class="card-text">Поездов прибыло:@(arrivedTrains == null? 0: arrivedTrains.Count())</p>
                <p class="card-text">Вагонов прибыло:@(arrivedTrains == null? 0: arrivedTrains.Sum(t => t.Length))</p>
                <p class="card-text">Общий вес:@(arrivedTrains == null? 0: arrivedTrains.Sum(t=>t.WeightBrutto)/10) тонн</p>
                <NavLink class="btn btn-primary" href="arrival">
                    Перейти к прибытию
                </NavLink>
            </div>
        </div>
    </div>
    <div class="col-6 p-2">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Отправление поездов</h5>
                <p class="card-text">Поездов сформировано:@(departingTrains == null? 0: departingTrains.Count())</p>
                <p class="card-text">Вагонов сформировано:@(departingTrains == null? 0: departingTrains.Sum(t => t.Length))</p>
                <p class="card-text">Общий вес:@(departingTrains == null? 0: departingTrains.Sum(t=>t.WeightBrutto)/10) тонн</p>
                <NavLink class="btn btn-primary" href="departure">
                    Перейти к отправлению
                </NavLink>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-6 p-2">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Парки путей</h5>
                @if (paths != null)
                    @foreach (string area in paths.Select(p => p.Area).Distinct())
                    {
                        <p class="card-text">@area.Trim(): @paths.Where(p => p.AnyTrain && p.Area == area).Count() путей из @paths.Where(p => p.Area == area).Count() занято </p>
                    }

                <NavLink class="btn btn-primary" href="paths">
                    Перейти к вагонам на путях
                </NavLink>
            </div>
        </div>
    </div>
    <div class="col-6 p-2">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Накопление</h5>
                @if (directions != null)
                {
                    var tracks = directions.Select(d => d.Track).Distinct();
                    foreach (string track in tracks)
                    {
                        var directionStations = directions.Where(d => d.Track == track).Select(d => d.StationDestination);
                        var vagonsToDirection = vagons.Where(v => directionStations.Contains(v.PlanForm) && v.TrainIndex == null);
                        <p class="card-text">@track: @(vagonsToDirection == null? 0: vagonsToDirection.Count()) (порожних @(vagonsToDirection == null? 0: vagonsToDirection.Where(v => v.WeightNetto == 0).Count())) </p>
                    }
                }
                <NavLink class="btn btn-primary" href="paths">
                    Перейти накоплению на путях
                </NavLink>
            </div>
        </div>
    </div>
</div>


@code {   

    List<TrainModel> arrivedTrains;
    List<TrainModel> departingTrains;
    List<Vagon> vagons;
    List<PathModel> paths;
    string[] areas;
    Direction[] directions;

    protected override async Task OnInitializedAsync()
    {
        var trains = await StationDataService.GetAllTrainsAsync();
        if(trains != null)
        {
            arrivedTrains = trains.Where(t => t.Index.Substring(9, 4) == "1613").ToList();
            departingTrains = trains.Where(t => t.Index.Substring(0, 4) == "1613").ToList();
        }
        //areas = await StationDataService.GetAreasAsync();
        paths = await StationDataService.GetPaths();
        directions = await StationDataService.GetDirections();
        vagons = await StationDataService.GetVagons();
    }
}