@page "/departure"

@using Microsoft.AspNetCore.Authentication.JwtBearer;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@inject NotificationService NotificationService
@inject StationAssistant.Data.IGvcDataService GvcDataFetch
@inject StationAssistant.Data.IStationDataService StationData
@attribute [Authorize]

@if (!DataIsLoaded)
{
    <img src="/Eclipse-load.gif" alt="Loading..." />
}
else
{
    <SfDialog @bind-Visible="@ConfirmIsVisible" Width="400px" Target="#target" ShowCloseIcon="true" Header="@Title" Content="@Body">
        <DialogButtons>
            <DialogButton Content="Yes" IsPrimary="true" OnClick="(async() => await Depart())" />
            <DialogButton Content="No" OnClick="(() => { ConfirmIsVisible = false; })" />
        </DialogButtons>
    </SfDialog>

    if (TrainListIsVisible)
    {
        <h3> Прогноз отправления поездов </h3>
        <div class="row">
            <div class="col-xs-6 col-sm-6 col-lg-3 col-md-3">
                <div col-2>
                    <SfButton Disabled="!TrainIsSelected" IsPrimary="true" OnClick="(async() => await Depart())">Отправить поезд</SfButton>
                </div>
                <div class="col-2">
                    <SfButton Disabled="!TrainIsSelected" IsPrimary="false" OnClick="(() => ShowDetails())">Натурный лист</SfButton>
                </div>
                <div class="col-2">
                    <SfButton Disabled="!TrainIsSelected" IsPrimary="false" OnClick="(async () => await onGetDepartureRoute())">Следующая нитка отправления</SfButton>
                </div>
                <div class="col-2">
                    <SfButton Disabled="!TrainIsSelected" IsPrimary="false" OnClick="(() => onOpenPath())">Перестановка состава</SfButton>
                </div>
            </div>
        </div>
        <div class="content-wrapper">
            <div class="row">
                <TrainList @ref="departingList" trainList="departingTrains"/> @*IsSelected="@(() => { TrainIsSelected = true; })" IsDeselected="@(() => { TrainIsSelected = false; })"*@  
            </div>
        </div>
    }
    else
    {
        <ConfirmModal Title="@Title" DialogClose="onCloseModal" OverlayClick="onCloseModal" OKClick="onOK">
            @if (FormationSheetIsVisible)
            {
                <FormationSheet trainIndex="@departingList.selectedTrain.Index"></FormationSheet>
            }
            else if (PathSelectorIsVisible)
            {
                <PathSelector @ref="pathSelector" selectedTrain="departingList.selectedTrain" isArriving="false" isDeparting="true"></PathSelector>
            }
@*            else if (ConfirmMessageIsVisible)
            {
                @Body
                <DialogButtons>
                    <DialogButton Content="Yes" IsPrimary="true" OnClick="(async() => await Depart())" />
                    <DialogButton Content="No" OnClick="(() => { ConfirmIsVisible = false; })" />
                </DialogButtons>
            }*@
        </ConfirmModal>
    }

    <style>
        .e-play-icon::before {
            content: '\e677';
            font-size: 12px;
        }
    </style>
}

@code {

    PathSelector pathSelector;
    TrainList departingList;
    private List<TrainModel> departingTrains { get; set; }
    private List<PathModel> paths { get; set; }
    public bool TrainIsSelected { get; set; } = false;
    private bool DataIsLoaded { get; set; } = false;
    private bool TrainListIsVisible { get; set; } = false;
    private bool PathSelectorIsVisible { get; set; } = false;
    private bool FormationSheetIsVisible { get; set; } = false;
    private bool ConfirmIsVisible { get; set; } = false;
    private string Title;
    private string Body;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            departingTrains = await StationData.GetDepartingTrains();
            TrainListIsVisible = true;
            DataIsLoaded = true;
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, $"Не удалось загрузить поезда");
            }
        }
    }

    private void ShowDetails()
    {
        if (departingList.selectedTrain == null)
        {
            NotificationService.SetMessage(TypeNotification.Info, "Выберите поезд из списка");
            return;
        }
        Title = "Телеграмма-натурный лист поезда " + departingList.selectedTrain.Index;
        TrainListIsVisible = false;
        FormationSheetIsVisible = true;
        StateHasChanged();
    }

    void onCloseModal()
    {
        PathSelectorIsVisible = false;
        TrainListIsVisible = true;
    }

    async Task onOK()
    {
        if (PathSelectorIsVisible && pathSelector != null)
        {
            //departingList.selectedTrain.Path = await StationData.GetPathAsync(pathSelector.PathId);
            try
            {
                PathModel newPathModel = await StationData.GetPathAsync(pathSelector.PathId);
                await StationData.RelocateTrain(departingList.selectedTrain.Index, newPathModel.Id);
            }
            catch (Exception e)
            {
                if (e is HttpRequestException)
                {
                    NotificationService.SetMessage(TypeNotification.Warning, e.Message);
                }
                else
                {
                    NotificationService.SetMessage(TypeNotification.Error, $"Не удалось загрузить поезда");
                }
            }
        }
        onCloseModal();
    }

    void onOpenPath()
    {
        var train = departingList.selectedTrain;
        Title = "Выбор пути отправления поезда" + (train.TrainNum == null ? train.TrainNum : train.Index);
        PathSelectorIsVisible = true;
        TrainListIsVisible = false;
    }

    void onPreDepart()
    {
        Title = $"Подтвердите действие";
        Body = "Отправить поезд ?";
        ConfirmIsVisible = true;
    }

    async Task onGetDepartureRoute()
    {
        try
        {
            var train = departingList.selectedTrain;
            short i = await StationData.SetDepartureRoute(train);
            StateHasChanged();
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, $"Не удалось выполнить операцию");
            }
        }
    }

    private async Task Depart()
    {
        try
        {
            TrainModel train = departingList.selectedTrain;
            if (train.TrainNum == null)
            {
                NotificationService.SetMessage(TypeNotification.Warning, "Не выбрана нитка отправления");
            }
            await StationData.TrainDeparture(train.Index);
            NotificationService.SetMessage(TypeNotification.Success, $"Операция по отправлению поезда №{train.TrainNum} проведена успешно");
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, $"Не удалось отправить поезд");
            }
        }
        //todo
        StateHasChanged();
    }

}
