@page "/register"

@inject IAuthenticationService iauth
@inject NavigationManager navigationManager

<EditForm class="form-signin" OnValidSubmit="CreateUser" Model="loginData">
    <DataAnnotationsValidator />
    <h4 class="font-weight-normal text-center my-2">Вход в систему</h4>

    <label for="inputUsername" class="sr-only">Логин</label>
    <InputText id="inputUsername" class="form-control" @bind-Value="loginData.Username" autofocus placeholder="Введите логин" />
    <ValidationMessage For="@(() => loginData.Username)" />

    <label for="inputPassword" class="sr-only">Пароль</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Введите пароль" @bind-Value="loginData.Password" />
    <ValidationMessage For="@(() => loginData.Password)" />

    <button class="btn btn-lg btn-primary btn-block" type="submit">
        Зарегистрироваться
    </button>
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3 mb-0">@error</div>
    }
</EditForm>

@code{
    private LoginData loginData = new LoginData();
    private User userInfo = new User();
    public int DropVal = 1;

    string error { get; set; }

    public class Roles
    {
        public int ID { get; set; }
        public string Name { get; set; }
    }

    private List<Roles> RolesList = new List<Roles>() {
        new Roles(){ ID= 1, Name= "Администратор" },
        new Roles(){ ID= 2, Name= "Дежурный по станции" },
        new Roles(){ ID= 3, Name= "Маневровый диспетчер" }
    };

    private async Task CreateUser()
    {
        error = null;
        try
        {
            await iauth.Register(loginData.Username, loginData.Password);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}