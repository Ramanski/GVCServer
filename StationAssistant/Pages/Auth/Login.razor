@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IAuthenticationService AuthenticationService

<h1 class="h2 font-weight-normal login-title">
    АСУ "Станционный ассистент"
</h1>

<EditForm class="form-signin" OnValidSubmit="LoginUser" Model="loginData">
    <DataAnnotationsValidator />
    <h4 class="font-weight-normal text-center my-2">Вход в систему</h4>

    <label for="inputUsername" class="sr-only">Логин</label>
    <InputText id="inputUsername" class="form-control" @bind-Value="loginData.Username" autofocus placeholder="Введите логин" />
    <ValidationMessage For="@(() => loginData.Username)" />

    <label for="inputPassword" class="sr-only">Пароль</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Введите пароль" @bind-Value="loginData.Password" />
    <ValidationMessage For="@(() => loginData.Password)" />

    <button class="btn btn-lg btn-primary btn-block" type="submit">
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Войти
    </button>
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3 mb-0">@error</div>
    }
</EditForm>

@code{
    private LoginData loginData = new LoginData();
    private bool loading;
    string error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationService.GetAuthenticationStateAsync();
        // redirect to home if already logged in
        if (authState.User.Identity.IsAuthenticated)
        {
            var user = await AuthenticationService.GetUser();
            Console.WriteLine("You are logged in as " + user?.FirstName);
            Redirect();
        }
    }

    private void Redirect()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var query = QueryHelpers.ParseNullableQuery(uri.Query);
        if (query != null && query.TryGetValue("returnUrl", out var returnUrl))
        {
            navigationManager.NavigateTo(returnUrl, true);
        }
        else
        {
            navigationManager.NavigateTo("", true);
        }
    }

    private async Task LoginUser()
    {
        error = null;
        loading = true;
        try
        {
            await AuthenticationService.Login(loginData.Username, loginData.Password);
            Redirect();
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
}