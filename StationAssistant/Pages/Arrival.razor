@page "/arrival"
@inject StationAssistant.Data.IGvcDataService GvcDataFetch
@inject StationAssistant.Data.IStationDataService StationData
@inject NotificationService NotificationService

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Popups
@using System.Timers
@attribute [Authorize]


@if (!DataIsLoaded)
{
    <img src="/Eclipse-load.gif" alt="Loading..." />
}
else
{
    <SfDialog @bind-Visible="@CancelConfirmVisible" Width="400px" Target="#target" ShowCloseIcon="true" Header="@Title" Content="@Body">
        <DialogButtons>
            <DialogButton Content="Да" IsPrimary="true" OnClick="(async() => await CancelArrival())" />
            <DialogButton Content="Нет" OnClick="(() => { CancelConfirmVisible = false; })" />
        </DialogButtons>
    </SfDialog>

    if (!(TrainListVisible || PathSelectorVisible))
    {
                <h3> Прогноз прибытия поездов </h3>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                <SfButton IsPrimary="true" OnClick="(async() => await Arrived())">Прибытие поезда</SfButton>
                <SfButton IsPrimary="false" OnClick="(async() => await GetDetails())">Получить ТГНЛ</SfButton>
                <SfButton IsPrimary="false" OnClick="(() => onOpenPath())">Выбрать путь</SfButton>
                <SfProgressButton CssClass="e-round e-small" IconCss="e-btn-sb-icons e-play-icon" OnClick="(() => updateArrivingList(null, null))">
                    <ProgressButtonSpinSettings Position="SpinPosition.Center"></ProgressButtonSpinSettings>
                    <ProgressButtonAnimationSettings Effect="AnimationEffect.ZoomOut"></ProgressButtonAnimationSettings>
                </SfProgressButton>
            </div>
        </div>
        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <TrainList @ref="arrivingList" trainList="arrivingTrains" ShowDislAndOper="true"></TrainList>
                </div>
            </div>
                <h3> Прибывшие поезда </h3>
            <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                <SfButton IsPrimary="false" OnClick="(async() => await CancelArrival())">Отмена прибытия</SfButton> @*Disabled=@(arrivedList.selectedTrain == null)*@
                <SfButton IsPrimary="false" OnClick="(async() => await Disband())">Расформировать</SfButton>
            </div>
            <div class="content-wrapper">
                <div class="row">
                    <TrainList @ref="arrivedList" trainList="arrivedTrains"></TrainList>
                </div>
            </div>
        </div>
    }
    else
    {
        <ConfirmModal Title="@TitleModal" DialogClose="onCloseModal" OverlayClick="onCloseModal" OKClick="onOK">
            @if (TrainListVisible)
            {
                <SfGrid DataSource="@detailedTrain.Vagons" EnableVirtualization="false" AllowSorting="true">
                    <GridColumns>
                        <GridColumn Field=@nameof(VagonModel.SequenceNum) HeaderText="№" Width="25"></GridColumn>
                        <GridColumn Field=@nameof(VagonModel.Num) HeaderText="Номер" TextAlign="TextAlign.Left" IsPrimaryKey="true" Width="50"></GridColumn>
                        <GridColumn Field=@nameof(VagonModel.Kind) HeaderText="Род" Width="40"></GridColumn>
                        <GridColumn Field=@nameof(VagonModel.Destination) HeaderText="Назначение" Width="60"></GridColumn>
                        <GridColumn Field=@nameof(VagonModel.Ksob) HeaderText="Собственник" Width="70"></GridColumn>
                        <GridColumn Field=@nameof(VagonModel.Tvag) HeaderText="Тара" Width="40"></GridColumn>
                        <GridColumn Field=@nameof(VagonModel.WeightNetto) HeaderText="Вес" Width="40"></GridColumn>
                        <GridColumn Field=@nameof(VagonModel.Mark) HeaderText="Отметки" Width="60"></GridColumn>
                    </GridColumns>
                </SfGrid>
            }
            else if (PathSelectorVisible)
            {
                <PathSelector @ref="pathSelector" selectedTrain="arrivingList.selectedTrain" isArriving="true"></PathSelector>
            }
        </ConfirmModal>
    }

    <style>
        .e-play-icon::before {
            content: '\e677';
            font-size: 12px;
        }
    </style>
}

@code {

    PathSelector pathSelector;
    TrainList arrivingList;
    TrainList arrivedList;
    private List<TrainModel> arrivingTrains { get; set; }
    private List<TrainModel> arrivedTrains { get; set; }
    private List<PathModel> paths { get; set; }
    [CascadingParameter] public string Message { get; set; }
    TrainModel detailedTrain;
    private string TitleModal { get; set; }
    private bool TrainListVisible { get; set; } = false;
    private bool PathSelectorVisible { get; set; } = false;
    private bool CancelConfirmVisible { get; set; } = false;
    private bool DataIsLoaded = false;
    Timer timer;
    private string Title;
    private string Body;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            arrivedTrains = await StationData.GetArrivedTrainsAsync();
            arrivingTrains = await GvcDataFetch.GetArrivingTrains();
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, $"Не удалось загрузить поезда");
            }
        }
        DataIsLoaded = true;
        timer = new Timer();
        timer.Interval = 30000;
        timer.Elapsed += updateArrivingList;
        //timer.Start();
    }

    private async void updateArrivingList(object sender, EventArgs e)
    {
        List<TrainModel> newList = await GvcDataFetch.GetArrivingTrains();
        var addedTrains = newList.Except(arrivingTrains);
        if(addedTrains.Any())
        {
            arrivingTrains.AddRange(addedTrains);
            //NotificationService.SetMessage(TypeNotification.Info, "Добавлены новые прибывающие поезда");
            //StateHasChanged();
        }
    }

    private async Task GetDetails()
    {
        if (arrivingList.selectedTrain == null)
        {
            NotificationService.SetMessage(TypeNotification.Info, "Выберите поезд из списка");
            return;
        }
        try
        {
            detailedTrain = await GvcDataFetch.GetTrainInfo(arrivingList.selectedTrain.Index);
        }
        catch (Exception)
        {
            NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить операцию");
        }
        onOpenList();
        StateHasChanged();
    }

    void onCloseModal()
    {
        PathSelectorVisible = false;
        TrainListVisible = false;
    }

    void onOpenList()
    {
        TitleModal = "Телеграмма-натурный лист поезда " + detailedTrain.TrainNum;
        TrainListVisible = true;
    }

    async Task onOK()
    {
        if (PathSelectorVisible && pathSelector != null)
        {
            arrivingList.selectedTrain.Path = await StationData.GetPathAsync(pathSelector.PathId);
        }
        onCloseModal();
    }

    void onOpenPath()
    {
        if (arrivingList.selectedTrain == null)
        {
            NotificationService.SetMessage(TypeNotification.Info, "Выберите поезд из списка");
            return;
        }
        TitleModal = "Выбор пути приема поезда " + arrivingList.selectedTrain.TrainNum;
        PathSelectorVisible = true;
    }

    private async Task Arrived()
    {
        TrainModel train = arrivingList.selectedTrain;

        if (train == null)
        {
            NotificationService.SetMessage(TypeNotification.Info, "Выберите поезд из списка");
            return;
        }
        else if(train.Path == null)
        {
            NotificationService.SetMessage(TypeNotification.Warning, "Выберите путь приема");
            return;
        }

        try
        {
            await GvcDataFetch.SendTrainArrivedAsync(train.Index, DateTime.Now);
            await StationData.AddTrainAsync(train.Index, DateTime.Now, train.Path.Id);
            arrivingList.DeleteTrain(train);
            train.DateOper = DateTime.Now;
            arrivedList.AddTrain(train);
            await arrivedList.DeselectRow();
            await arrivingList.DeselectRow();
            await StationData.UpdatePathOccupation(train.Path.Id);
            NotificationService.SetMessage(TypeNotification.Success, $"Операция по прибытию поезда №{train.TrainNum} завершена");
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить операцию");
            }
            return;
        }
    }

    void onCancel()
    {
        Title = "Отмена прибытия поезда";
        Body = $"Отменить ранее переданное сообщение о прибытии поезда {arrivedList.selectedTrain.TrainNum}?";
        CancelConfirmVisible = true;
    }

    private async Task CancelArrival()
    {
        TrainModel train = arrivedList.selectedTrain;
        CancelConfirmVisible = false;

        if (train == null)
        {
            NotificationService.SetMessage(TypeNotification.Info, "Выберите поезд из списка прибывших");
            return;
        }

        try
        {
            await GvcDataFetch.CancelOperation(train.Index, "201");
            await StationData.DeleteTrainAsync(train.Index);
            arrivedList.DeleteTrain(train);
            arrivingList.AddTrain(train);
            await arrivedList.DeselectRow();
            await arrivingList.DeselectRow();
            await StationData.UpdatePathOccupation(train.Path.Id);
            NotificationService.SetMessage(TypeNotification.Success, $"Операция по отмене прибытия поезда №{train.TrainNum} проведена успешно");
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить операцию");
            }
        }
    }

    private async Task Disband()
    {
        try
        {
            await GvcDataFetch.SendDisbanding(arrivedList.selectedTrain.Index, DateTime.Now);
            await StationData.DisbandTrain(arrivedList.selectedTrain);
            NotificationService.SetMessage(TypeNotification.Success, $"Операция по расформированию поезда №{arrivedList.selectedTrain.TrainNum} завершена");
            arrivedList.DeleteTrain(arrivedList.selectedTrain);
        }
        catch (Exception e)
        {
            if (e is HttpRequestException)
            {
                NotificationService.SetMessage(TypeNotification.Warning, e.Message);
            }
            else if(e is AggregateException)
            {
                foreach (Exception innerException in (e as AggregateException).InnerExceptions)
                {
                    NotificationService.SetMessage(TypeNotification.Warning, innerException.Message);
                }
            }
            else
            {
                NotificationService.SetMessage(TypeNotification.Error, "Не удалось выполнить операцию");
            }
        }
    }
}
